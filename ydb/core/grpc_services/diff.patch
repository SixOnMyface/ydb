diff --git a/ydb/core/grpc_services/base/base.h b/ydb/core/grpc_services/base/base.h
index f6468ed76aa..28c32b62cc2 100644
--- a/ydb/core/grpc_services/base/base.h
+++ b/ydb/core/grpc_services/base/base.h
@@ -277,6 +277,7 @@ class IAuditCtx : public virtual IRequestCtxBaseMtSafe {
 public:
     virtual void AddAuditLogPart(const TStringBuf& name, const TString& value) = 0;
     virtual const TAuditLogParts& GetAuditLogParts() const = 0;
+    virtual ~IAuditCtx() = default;
 };
 
 class IRequestCtxBase
@@ -1676,9 +1677,10 @@ private:
 
 class TEvRequestAuthAndCheckResult : public TEventLocal<TEvRequestAuthAndCheckResult, TRpcServices::EvRequestAuthAndCheckResult> {
 public:
-    TEvRequestAuthAndCheckResult(Ydb::StatusIds::StatusCode status, const NYql::TIssues& issues)
+    TEvRequestAuthAndCheckResult(Ydb::StatusIds::StatusCode status, const NYql::TIssues& issues, const TAuditLogParts& auditLogParts = {})
         : Status(status)
         , Issues(issues)
+        , AuditLogParts(auditLogParts)
     {}
 
     TEvRequestAuthAndCheckResult(Ydb::StatusIds::StatusCode status, const NYql::TIssue& issue)
@@ -1693,10 +1695,11 @@ public:
         Issues.AddIssue(error);
     }
 
-    TEvRequestAuthAndCheckResult(const TString& database, const TMaybe<TString>& ydbToken, const TIntrusiveConstPtr<NACLib::TUserToken>& userToken)
+    TEvRequestAuthAndCheckResult(const TString& database, const TMaybe<TString>& ydbToken, const TIntrusiveConstPtr<NACLib::TUserToken>& userToken, const TAuditLogParts& auditLogParts = {})
         : Database(database)
         , YdbToken(ydbToken)
         , UserToken(userToken)
+        , AuditLogParts(auditLogParts)
     {}
 
     Ydb::StatusIds::StatusCode Status = Ydb::StatusIds::SUCCESS;
@@ -1704,6 +1707,7 @@ public:
     TString Database;
     TMaybe<TString> YdbToken;
     TIntrusiveConstPtr<NACLib::TUserToken> UserToken;
+    TAuditLogParts AuditLogParts;
 };
 
 class TEvRequestAuthAndCheck
@@ -1734,6 +1738,14 @@ public:
         return AuthState;
     }
 
+    void SetAuditMode(TAuditMode auditMode) {
+        AuditMode = auditMode;
+    }
+
+    TAuditMode GetAuditMode() const override {
+        return AuditMode;
+    }
+
     void ReplyUnauthenticated(const TString& msg = "") override {
         if (msg) {
             IssueManager.RaiseIssue(NYql::TIssue{msg});
@@ -1748,14 +1760,16 @@ public:
                 new TEvRequestAuthAndCheckResult(
                     Database,
                     YdbToken,
-                    UserToken
+                    UserToken,
+                    AuditLogParts
                 )
             );
         } else {
             ctx.Send(Sender,
                 new TEvRequestAuthAndCheckResult(
                     status,
-                    IssueManager.GetIssues()
+                    IssueManager.GetIssues(),
+                    AuditLogParts
                 )
             );
         }
@@ -1895,6 +1909,7 @@ public:
     TMaybe<TString> YdbToken;
     NActors::TActorId Sender;
     NYdbGrpc::TAuthState AuthState;
+    TAuditMode AuditMode;
     NWilson::TSpan Span;
     IGRpcProxyCounters::TPtr Counters;
     TMaybe<NRpcService::TRlPath> RlPath;
diff --git a/ydb/core/grpc_services/grpc_request_check_actor.h b/ydb/core/grpc_services/grpc_request_check_actor.h
index 76485bd2cdc..5c9153cff3a 100644
--- a/ydb/core/grpc_services/grpc_request_check_actor.h
+++ b/ydb/core/grpc_services/grpc_request_check_actor.h
@@ -483,15 +483,20 @@ private:
         const TString sanitizedToken = TBase::GetSanitizedToken();
         if (auditEnabledReceived || auditEnabledCompleted) {
             AuditContextStart(requestBaseCtx, databaseName, userSID, sanitizedToken, Attributes_);
-            if (auditEnabledReceived) {
-                AuditLog(std::nullopt, requestBaseCtx->GetAuditLogParts());
-            }
 
-            if (auditEnabledCompleted) {
-                requestBaseCtx->SetAuditLogHook([requestBaseCtx](ui32 status, const TAuditLogParts& parts) {
-                    AuditContextEnd(requestBaseCtx);
-                    AuditLog(status, parts);
-                });
+            // RequestAuthAndCheck is a monitoring service request; audit is not logged for it
+            // logClass is provided by the monitoring service
+            if constexpr (!std::is_same_v<TEvent, TEvRequestAuthAndCheck>) {
+                if (auditEnabledReceived) {
+                    AuditLog(std::nullopt, requestBaseCtx->GetAuditLogParts());
+                }
+
+                if (auditEnabledCompleted) {
+                    requestBaseCtx->SetAuditLogHook([requestBaseCtx](ui32 status, const TAuditLogParts& parts) {
+                        AuditContextEnd(requestBaseCtx);
+                        AuditLog(status, parts);
+                    });
+                }
             }
         }
     }
diff --git a/ydb/core/grpc_services/grpc_request_proxy_simple.cpp b/ydb/core/grpc_services/grpc_request_proxy_simple.cpp
index 40f14c0c177..a4154345611 100644
--- a/ydb/core/grpc_services/grpc_request_proxy_simple.cpp
+++ b/ydb/core/grpc_services/grpc_request_proxy_simple.cpp
@@ -106,9 +106,7 @@ private:
     template <typename TEvent>
     void PreHandle(TAutoPtr<TEventHandle<TEvent>>& event, const TActorContext& ctx) {
         IRequestProxyCtx* requestBaseCtx = event->Get();
-
         LogRequest(event);
-
         if (IsAuthStateOK(*requestBaseCtx)) {
             Handle(event, ctx);
             return;
diff --git a/ydb/core/mon/audit/audit.cpp b/ydb/core/mon/audit/audit.cpp
index d9d083eb7cc..a933dac8a3e 100644
--- a/ydb/core/mon/audit/audit.cpp
+++ b/ydb/core/mon/audit/audit.cpp
@@ -16,7 +16,7 @@ namespace {
     const TString EMPTY_VALUE = "{none}";
     const TString X_FORWARDED_FOR_HEADER = "X-Forwarded-For";
     const TStringBuf TRUNCATED_SUFFIX = "**TRUNCATED_BY_YDB**";
-    const TString REASON_EXECUTE = "Execute";
+    const TString REASON_RECEIVED = "Received";
 
     // audit event has limit of 4 MB, but we limit body size to 2 MB
     const size_t MAX_AUDIT_BODY_SIZE = 2_MB - TRUNCATED_SUFFIX.size();
@@ -117,28 +117,33 @@ void TAuditCtx::InitAudit(const NHttp::TEvHttpProxy::TEvHttpIncomingRequest::TPt
     }
 }
 
-void TAuditCtx::AddAuditLogParts(const TIntrusiveConstPtr<NACLib::TUserToken>& userToken) {
-    if (!Auditable) {
+void TAuditCtx::AddAuditLogParts(const NKikimr::NGRpcService::TEvRequestAuthAndCheckResult* result) {
+    if (!Auditable || !result) {
         return;
     }
-    SubjectType = userToken ? userToken->GetSubjectType() : NACLibProto::SUBJECT_TYPE_ANONYMOUS;
-    if (userToken) {
-        Subject = userToken->GetUserSID();
-        SanitizedToken = userToken->GetSanitizedToken();
+
+    static const THashSet<TString> DATABASE_CLOUD_PARTS = {"cloud_id", "folder_id", "resource_id", "sanitized_token", "subject"};
+
+    for (const auto& [key, value] : result->AuditLogParts) {
+        if (DATABASE_CLOUD_PARTS.contains(key)) {
+            AddAuditLogPart(key, value);
+        }
+    }
+
+    if (result->UserToken) {
+        const auto& userToken = result->UserToken;
+        SubjectType = userToken ? userToken->GetSubjectType() : NACLibProto::SUBJECT_TYPE_ANONYMOUS;
     }
 }
 
 void TAuditCtx::LogAudit(ERequestStatus status, const TString& reason, NKikimrConfig::TAuditConfig::TLogClassConfig::ELogPhase logPhase) {
-    auto auditEnabled = NKikimr::AppData()->AuditConfig.EnableLogging(NKikimrConfig::TAuditConfig::TLogClassConfig::ClusterAdmin, logPhase, SubjectType);
+    auto auditEnabled = NKikimr::AppData()->AuditConfig.EnableLogging(MONITORING_LOG_CLASS, logPhase, SubjectType);
 
     if (!Auditable || !auditEnabled) {
         return;
     }
 
     AUDIT_LOG(
-        AddAuditLogPart("subject", (Subject ? Subject : EMPTY_VALUE));
-        AddAuditLogPart("sanitized_token", (SanitizedToken ? SanitizedToken : EMPTY_VALUE));
-
         for (const auto& [name, value] : Parts) {
             AUDIT_PART(name, (!value.empty() ? value : EMPTY_VALUE));
         }
@@ -149,7 +154,7 @@ void TAuditCtx::LogAudit(ERequestStatus status, const TString& reason, NKikimrCo
 }
 
 void TAuditCtx::LogOnReceived() {
-    LogAudit(ERequestStatus::Process, REASON_EXECUTE, NKikimrConfig::TAuditConfig::TLogClassConfig::Received);
+    LogAudit(ERequestStatus::Process, REASON_RECEIVED, NKikimrConfig::TAuditConfig::TLogClassConfig::Received);
 }
 
 void TAuditCtx::LogOnCompleted(const NHttp::THttpOutgoingResponsePtr& response) {
diff --git a/ydb/core/mon/audit/audit.h b/ydb/core/mon/audit/audit.h
index 8ea3532eede..b651fe8cc9e 100644
--- a/ydb/core/mon/audit/audit.h
+++ b/ydb/core/mon/audit/audit.h
@@ -1,6 +1,7 @@
 #pragma once
 
 #include <ydb/core/protos/config.pb.h>
+#include <ydb/core/grpc_services/base/base.h>
 
 #include <ydb/library/aclib/aclib.h>
 #include <ydb/library/actors/http/http.h>
@@ -21,10 +22,11 @@ enum ERequestStatus {
 class TAuditCtx {
 public:
     void InitAudit(const NHttp::TEvHttpProxy::TEvHttpIncomingRequest::TPtr& ev);
-    void AddAuditLogParts(const TIntrusiveConstPtr<NACLib::TUserToken>& userToken);
+    void AddAuditLogParts(const NKikimr::NGRpcService::TEvRequestAuthAndCheckResult* result);
     void LogAudit(ERequestStatus status, const TString& reason, NKikimrConfig::TAuditConfig::TLogClassConfig::ELogPhase logPhase);
     void LogOnReceived();
     void LogOnCompleted(const NHttp::THttpOutgoingResponsePtr& response);
+    static const NKikimrConfig::TAuditConfig::TLogClassConfig::ELogClass MONITORING_LOG_CLASS = NKikimrConfig::TAuditConfig::TLogClassConfig::ClusterAdmin;
 
 private:
     void AddAuditLogPart(TStringBuf name, const TString& value);
@@ -33,8 +35,6 @@ private:
     TAuditParts Parts;
     bool Auditable = false;
     NACLibProto::ESubjectType SubjectType = NACLibProto::SUBJECT_TYPE_ANONYMOUS;
-    TString Subject;
-    TString SanitizedToken;
 };
 
 }
diff --git a/ydb/core/mon/mon.cpp b/ydb/core/mon/mon.cpp
index 94e6c6f3da3..0a25c874483 100644
--- a/ydb/core/mon/mon.cpp
+++ b/ydb/core/mon/mon.cpp
@@ -102,13 +102,16 @@ TString GetDatabase(NHttp::THttpIncomingRequest* request) {
 }
 
 IEventHandle* GetRequestAuthAndCheckHandle(const NActors::TActorId& owner, const TString& database, const TString& ticket) {
+    auto *ev = new NKikimr::NGRpcService::TEvRequestAuthAndCheck(
+            database,
+            ticket ? TMaybe<TString>(ticket) : Nothing(),
+            owner
+        );
+    ev->SetAuditMode(NKikimr::NGRpcService::TAuditMode::Modifying(NMonitoring::NAudit::TAuditCtx::MONITORING_LOG_CLASS));
     return new NActors::IEventHandle(
         NGRpcService::CreateGRpcRequestProxyId(),
         owner,
-        new NKikimr::NGRpcService::TEvRequestAuthAndCheck(
-            database,
-            ticket ? TMaybe<TString>(ticket) : Nothing(),
-            owner),
+        ev,
         IEventHandle::FlagTrackDelivery
     );
 }
@@ -390,6 +393,7 @@ public:
                 return;
             }
         }
+        AuditCtx.LogOnReceived();
         SendRequest();
     }
 
@@ -524,10 +528,8 @@ public:
         }
         TString serializedToken;
         if (result && result->UserToken) {
-            AuditCtx.AddAuditLogParts(result->UserToken);
             serializedToken = result->UserToken->GetSerializedToken();
         }
-        AuditCtx.LogOnReceived();
         Send(ActorMonPage->TargetActorId, new NMon::TEvHttpInfo(
             Container, serializedToken), IEventHandle::FlagTrackDelivery);
     }
@@ -553,6 +555,8 @@ public:
 
     void Handle(NKikimr::NGRpcService::TEvRequestAuthAndCheckResult::TPtr& ev) {
         const NKikimr::NGRpcService::TEvRequestAuthAndCheckResult& result(*ev->Get());
+        AuditCtx.AddAuditLogParts(&result);
+        AuditCtx.LogOnReceived();
         if (result.Status != Ydb::StatusIds::SUCCESS) {
             return ReplyErrorAndPassAway(result);
         }
@@ -1060,6 +1064,7 @@ public:
                 return;
             }
         }
+        AuditCtx.LogOnReceived();
         SendRequest();
         Become(&THttpMonAuthorizedActorRequest::StateWork);
     }
@@ -1171,10 +1176,8 @@ public:
                 << " " << request->URL);
         }
         if (result && result->UserToken) {
-            AuditCtx.AddAuditLogParts(result->UserToken);
             Event->Get()->UserToken = result->UserToken->GetSerializedToken();
         }
-        AuditCtx.LogOnReceived();
         Send(new IEventHandle(Fields.Handler, SelfId(), Event->ReleaseBase().Release(), IEventHandle::FlagTrackDelivery, Event->Cookie));
     }
 
@@ -1197,6 +1200,8 @@ public:
 
     void Handle(NKikimr::NGRpcService::TEvRequestAuthAndCheckResult::TPtr& ev) {
         const NKikimr::NGRpcService::TEvRequestAuthAndCheckResult& result(*ev->Get());
+        AuditCtx.AddAuditLogParts(&result);
+        AuditCtx.LogOnReceived();
         if (result.Status != Ydb::StatusIds::SUCCESS) {
             return ReplyErrorAndPassAway(result);
         }
